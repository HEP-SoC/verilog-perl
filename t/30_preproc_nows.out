verilog/inc_def09.v:1: `line 1 "verilog/inc1.v" 1
verilog/inc_def09.v:1: `line 1 "verilog/inc1.v" 0
verilog/inc_def09.v:1: `line 1 "verilog/inc2.v" 1
verilog/inc_def09.v:1: `line 1 "verilog/inc2.v" 0
verilog/inc_def09.v:1: `line 1 "verilog/inc_ifdef.v" 1
verilog/inc_def09.v:1: `line 1 "verilog/inc_ifdef.v" 0
verilog/inc_def09.v:1: `line 1 "verilog/inc_nonl.v" 1
verilog/inc_def09.v:1: `line 1 "verilog/inc_nonl.v" 0
verilog/inc_def09.v:1: `line 1 "verilog/inc_def09.v" 1
verilog/inc_def09.v:6: 'initial $display("start", "msg1" , "msg2" , "end");'
verilog/inc_def09.v:7: 'initial $display("start", "msg1" , "msg2" , "end");'
verilog/inc_def09.v:8: 'initial $display("start", " msg1" , , "end");'
verilog/inc_def09.v:9: 'initial $display("start", " msg1" , , "end");'
verilog/inc_def09.v:10: 'initial $display("start", , "msg2 ", "end");'
verilog/inc_def09.v:11: 'initial $display("start", , "msg2 ", "end");'
verilog/inc_def09.v:12: 'initial $display("start", , , "end");'
verilog/inc_def09.v:13: 'initial $display("start", , , "end");'
verilog/inc_def09.v:14: 'initial $display("start", , , "end");'
verilog/inc_def09.v:15: 'initial $display("start", , , "end");'
verilog/inc_def09.v:22: '$display(5,,2,,3 );'
verilog/inc_def09.v:23: '$display(5,,2,,3);'
verilog/inc_def09.v:24: '$display(1 ,,"B",,3 );'
verilog/inc_def09.v:25: '$display(1 ,,"B",,3 );'
verilog/inc_def09.v:26: '$display(5,,2,,);'
verilog/inc_def09.v:27: '$display(5,,2,,);'
verilog/inc_def09.v:31: '$display(1,,,,3);'
verilog/inc_def09.v:32: '$display(5,,,,"C");'
verilog/inc_def09.v:33: '$display(5,,2,,"C");'
verilog/inc_def09.v:34: '$display(5,,2,,"C");'
verilog/inc_def09.v:35: '$display(5,,2,,"C");'
verilog/inc_def09.v:36: '$display(5,,2,,"C");'
verilog/inc_def09.v:39: '$display(1 ,,0,,"C");'
verilog/inc_def09.v:40: '$display(1 ,,0,,"C");'
verilog/inc_def09.v:41: '$display(5,,0,,"C");'
verilog/inc_def09.v:42: '$display(5,,0,,"C");'
verilog/inc_def09.v:46: 'b + 1 + 42 + a '
verilog/inc_def09.v:47: 'b + 1 + 42 + a'
verilog/inc_def09.v:51: '"==)" "((((" () ';
verilog/inc_def09.v:52: '"==)" "((((" () ';
verilog/inc_def09.v:65: '(6) (eq=al) ZOT'
verilog/inc_def09.v:66: HERE-Line66
verilog/inc_def09.v:69: `line 69 "verilog/inc_def09.v" 2
verilog/inc_def09.v:69: `line 1 "verilog/inc_nonl.v" 0
verilog/inc_nonl.v:2: blah-no-newline-here>
verilog/inc_nonl.v:2: `line 2 "verilog/inc_nonl.v" 2
verilog/inc_nonl.v:2: `line 1 "verilog/inc_ifdef.v" 0
verilog/inc_ifdef.v:8: `line 8 "verilog/inc_ifdef.v" 0
verilog/inc_ifdef.v:12:  $display("1A");
verilog/inc_ifdef.v:15: `line 15 "verilog/inc_ifdef.v" 0
verilog/inc_ifdef.v:16:  $display("2A");
verilog/inc_ifdef.v:21: `line 21 "verilog/inc_ifdef.v" 0
verilog/inc_ifdef.v:22:  $display("3AELSE");
verilog/inc_ifdef.v:26: `line 26 "verilog/inc_ifdef.v" 0
verilog/inc_ifdef.v:40: `line 40 "verilog/inc_ifdef.v" 0
verilog/inc_ifdef.v:41: `line 41 "verilog/inc_ifdef.v" 2
verilog/inc_ifdef.v:41: `line 1 "verilog/inc2.v" 0
verilog/inc2.v:4: At file "verilog/inc2.v" line 4
verilog/inc3.v:1: `line 5 "verilog/inc2.v" 0
verilog/inc3.v:1: `line 1 "verilog/inc3.v" 1
verilog/inc3.v:1: `line 2 "inc3_a_filename_from_line_directive" 0
inc3_a_filename_from_line_directive:10:  At file "inc3_a_filename_from_line_directive" line 10
inc3_a_filename_from_line_directive:13: `line 13 "inc3_a_filename_from_line_directive" 0
inc3_a_filename_from_line_directive:17: `line 17 "inc3_a_filename_from_line_directive" 0
inc3_a_filename_from_line_directive:18: `line 18 "inc3_a_filename_from_line_directive" 2
inc3_a_filename_from_line_directive:18: `line 5 "verilog/inc2.v" 0
verilog/inc2.v:6: `line 6 "verilog/inc2.v" 2
verilog/inc2.v:6: `line 1 "verilog/inc1.v" 0
verilog/inc1.v:4:  text.
verilog/inc1.v:15:  wire [3:0] q = {
verilog/inc1.v:16:    1'b1   
verilog/inc1.v:16: `line 16 "verilog/inc1.v" 0
verilog/inc1.v:16:  ,
verilog/inc1.v:17: `line 17 "verilog/inc1.v" 0
verilog/inc1.v:17:  1'b0  ,
verilog/inc1.v:18:    1'b1   
verilog/inc1.v:18: `line 18 "verilog/inc1.v" 0
verilog/inc1.v:18:  ,
verilog/inc1.v:19: `line 19 "verilog/inc1.v" 0
verilog/inc1.v:19:  1'b0 
verilog/inc1.v:20:  };
verilog/inc1.v:22: text.
verilog/inc1.v:26: foo  bar 
verilog/inc1.v:27: foobar2
verilog/inc1.v:39: first part second part third part
verilog/inc1.v:40: Line_Preproc_Check 40
verilog/inc1.v:48: deep deep
verilog/inc1.v:52: "Inside: `nosubst"
verilog/inc1.v:53: "`nosubst"
verilog/inc1.v:56: x y LLZZ x y
verilog/inc1.v:57: p q LLZZ p q r s LLZZ r s  LLZZ p q LLZZ p q r s LLZZ r s 
verilog/inc1.v:61: firstline comma","line LLZZ firstline comma","line
verilog/inc1.v:64: x y LLZZ "a" y
verilog/inc1.v:67: (a,b)(a,b)
verilog/inc1.v:70: $display("left side: \"right side\"")
verilog/inc1.v:73: bar_suffix more
verilog/inc1.v:77: $c("Zap(\"",bug1,"\");");;
verilog/inc1.v:78: $c("Zap(\"","bug2","\");");;
verilog/inc1.v:92:  initial begin
verilog/inc1.v:94:  $display("pre `thru(thrupre `thru(thrumid) thrupost) post: \"right side\"");
verilog/inc1.v:95:  $display("left side: \"right side\"");
verilog/inc1.v:96:  $display("left side : \"right side \"");
verilog/inc1.v:97:  $display("`ls : \"`rs \"");
verilog/inc1.v:98:  $display("`noarg : \"`rs \"");
verilog/inc1.v:99:  $display("prep ( midp1 `ls midp2 ( outp ) ) : \"`rs \"");
verilog/inc1.v:100:  $display("`noarg: \"`noarg`noarg\"");
verilog/inc1.v:101:  $display("`thruthru : \"`thruthru \""); 
verilog/inc1.v:102:  $display("`thru(): \"\""); 
verilog/inc1.v:103:  $display("`thru(left side): \"`thru(right side)\"");
verilog/inc1.v:104:  $display("`thru( left side ) : \"`thru( right side ) \"");
verilog/inc1.v:108:  $display("twoline: \"`twoline\"");
verilog/inc1.v:111:  $write("*-* All Finished *-*\n");
verilog/inc1.v:112:  $finish;
verilog/inc1.v:113:  end
verilog/inc1.v:114: endmodule
verilog/inc1.v:124: module add1 ( input wire d1, output wire o1);
verilog/inc1.v:125:  wire tmp_d1 = d1; wire tmp_o1 = tmp_d1 + 1; assign o1 = tmp_o1 ; 
verilog/inc1.v:126: endmodule
verilog/inc1.v:127: module add2 ( input wire d2, output wire o2);
verilog/inc1.v:128:  wire tmp_d2 = d2 ; wire tmp_o2 = tmp_d2 + 1; assign o2 = tmp_o2 ; 
verilog/inc1.v:129: endmodule
verilog/inc1.v:142:  generate for (i=0; i<(3); i=i+1) begin psl cover { m5k.f .ctl._ctl_mvldx_m1.d[i] & ~m5k.f .ctl._ctl_mvldx_m1.q[i] & !m5k.f .ctl._ctl_mvldx_m1.cond & ((m5k.f .ctl.alive & m5k.f .ctl.alive_m1))} report "fondNoRise: m5kc_fcl._ctl_mvldx_m1"; psl cover { ~m5k.f .ctl._ctl_mvldx_m1.d[i] & m5k.f .ctl._ctl_mvldx_m1.q[i] & !m5k.f .ctl._ctl_mvldx_m1.cond & ((m5k.f .ctl.alive & m5k.f .ctl.alive_m1))} report "fondNoFall: m5kc_fcl._ctl_mvldx_m1"; end endgenerate 
verilog/inc1.v:146: module prot();
verilog/inc1.v:147: `protected
verilog/inc1.v:147:     I!#r#e6<_Q{{E2+]I3<[3s)1@D|'E''i!O?]jD>Jo_![Cl)
verilog/inc1.v:147:     #nj1]p,3^1~,="E@QZB\T)eU\pC#C|7=\$J$##A[@-@{Qk]
verilog/inc1.v:150: `endprotected
verilog/inc1.v:151: endmodule
verilog/inc1.v:164: begin addr <= (({regs[6], regs[7]} + 1)); rd <= 1; end and begin addr <= (({regs[6], regs[7]})); wdata <= (rdata); wr <= 1; end
verilog/inc1.v:165: begin addr <= ({regs[6], regs[7]} + 1); rd <= 1; end
verilog/inc1.v:166: begin addr <= ({regs[6], regs[7]}); wdata <= (rdata); wr <= 1; end more
verilog/inc4.v:1: `line 171 "verilog/inc1.v" 0
verilog/inc4.v:1: `line 1 "verilog/inc4.v" 1
verilog/inc4.v:6: `line 6 "verilog/inc4.v" 2
verilog/inc4.v:6: `line 171 "verilog/inc1.v" 0
verilog/inc1.v:174: `line 174 "verilog/inc1.v" 0
verilog/inc1.v:179: `line 179 "verilog/inc1.v" 0
verilog/inc1.v:185: $blah("ab,cd","e,f");
verilog/inc1.v:186: $blah(this.logfile,vec);
verilog/inc1.v:187: $blah(this.logfile,vec[1,2,3]);
verilog/inc1.v:188: $blah(this.logfile,{blah.name(), " is not foo"});
verilog/inc1.v:193: `pragma foo = 1
verilog/inc1.v:194: `default_nettype none
verilog/inc1.v:195: `default_nettype uwire
verilog/inc1.v:203: `line 203 "verilog/inc1.v" 0
verilog/inc1.v:204: Line_Preproc_Check 204
verilog/inc1.v:212: (p,q)
verilog/inc1.v:216: (x,y )
verilog/inc1.v:217: Line_Preproc_Check 217
verilog/inc1.v:226: beginend 
verilog/inc1.v:227: beginend 
verilog/inc1.v:228: "`BEGIN`END" 
verilog/inc1.v:234:  got_escaped
verilog/inc1.v:236: Not a \`define
verilog/inc1.v:244: x,y)--bee submacro has comma paren
verilog/inc1.v:249: $display("bits %d %d", $bits(foo), `10);
verilog/inc1.v:254: `line 254 "verilog/inc1.v" 0
verilog/inc1.v:256: `line 256 "verilog/inc1.v" 0
verilog/inc1.v:257: `line 257 "verilog/inc1.v" 0
verilog/inc1.v:273: `line 273 "verilog/inc1.v" 0
verilog/inc1.v:273: `line 273 "verilog/inc1.v" 0
verilog/inc1.v:273:  assign a3 = ~b3 ; 
verilog/inc1.v:276:  \
verilog/inc1.v:284:  def foo
verilog/inc1.v:298: 1  (nodef)
verilog/inc1.v:299: 2  (hasdef)
verilog/inc1.v:300: 3  (nodef)
verilog/inc1.v:301: 4  (nodef)
verilog/inc1.v:302: 5 also in also3 (nodef)
verilog/inc1.v:305: HAS a NEW LINE
verilog/inc1.v:325: EXP: clxx_scen
verilog/inc1.v:326: clxx_scen
verilog/inc1.v:327: EXP: clxx_scen
verilog/inc1.v:328: "`msg_scen_(clxx)"
verilog/inc1.v:330: EXP: do if (start("verilog/inc1.v", 25)) begin message({"Blah-", "clx_scen", " end"}); end while(0);
verilog/inc1.v:331: do      
verilog/inc1.v:331: `line 331 "verilog/inc1.v" 0
verilog/inc1.v:331:  if (start("verilog/inc1.v", 331)) begin  message({"Blah-", "`msg_scen_(clx)", " end"}); end  while(0);
verilog/inc1.v:341: `line 341 "verilog/inc1.v" 0
verilog/inc1.v:343: EXP: This is fooed
verilog/inc1.v:344: This is fooed  
verilog/inc1.v:346: EXP: This is fooed_2
verilog/inc1.v:347: This is fooed_2
verilog/inc1.v:351: np
verilog/inc1.v:352: np
verilog/inc1.v:359: `line 359 "verilog/inc1.v" 0
verilog/inc1.v:362: `line 362 "verilog/inc1.v" 0
verilog/inc1.v:364: `line 364 "verilog/inc1.v" 2
